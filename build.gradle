/*
 * Copyright (C) 2018-present Kieran O'Brien
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

// Top-level build file where you can add configuration options common to all sub-projects/modules.

apply plugin: "com.github.ben-manes.versions"

buildscript {
    apply from: file("dependencies.gradle")
    apply from: file("test-dependencies.gradle")

    ext.buildConfig = [
            "compileSdk": 28,
            "minSdk"    : 21,
            "targetSdk" : 28
    ]

    addRepos(repositories)

    // NOTE: Do not place your application dependencies here;
    // they belong in the individual module build.gradle files
    dependencies {
        classpath gradlePlugins.android
        classpath gradlePlugins.kotlin
        classpath gradlePlugins.licenses
        classpath gradlePlugins.safeArgs
        classpath gradlePlugins.versions
    }

    repositories {
        google()
    }
}

allprojects {
    addRepos(repositories)

    tasks.withType(JavaCompile).all {
        options.compilerArgs += [
                "-Adagger.formatGeneratedSource=disabled",
                "-Adagger.gradle.incremental=enabled"
        ]
    }

    afterEvaluate {
        extensions.findByName("kapt")?.arguments {
            arg("dagger.formatGeneratedSource", "disabled")
        }
    }
}

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ["alpha", "beta", "rc", "cr", "m", "preview", "b", "ea", "eap"].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]$qualifier[.\d-+]*/
            }

            if (rejected) {
                selection.reject("Release candidate")
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
